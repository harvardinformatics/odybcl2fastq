configfile: "snakemake_config.json"
localrules: all, update_lims_db, cp_source_to_output, checksum, publish
from odybcl2fastq.run import update_lims_db, setup_run_logger
from odybcl2fastq.parsers.samplesheet import SampleSheet
# TODO: use a function for runs
RUNS = ['190307_NB501677_0400_AH2WFKBGXB']

rule all:
    input:
        #expand("{output}{run}/demultiplex_10x.sh", output=config['output'], run=RUNS)
        expand("{output}{run}/demultiplex.processed", output=config['output'], run=RUNS)
        # TODO: consider regex pattern constraints on run
        #expand("{output}{run}/update_lims_db.processed", output=config['output'], run=RUNS)
        #expand("{output}{run}/fastqc.processed", output=config['output'], run=RUNS)
        #expand("{output}{run}/RunInfo.xml", output=config['output'], run=RUNS)
        #expand("{output}{run}/md5sum.txt", output=config['output'], run=RUNS)
        #expand("{output}{run}/ody.complete", output=config['output'], run=RUNS)

rule demultiplex_10x_cmd:
    input:
        run_dir=expand("{source}{{run}}/SampleSheet.csv", source=config['source'])
    params:
        time="8:00:00",
        N=1,
        cores=8,
        mem=32000,
        partition="bos-info"
    output:
        expand("{output}{{run}}/demultiplex_10x.sh", output=config['output'])
    message:
        "writing cmd"
    shell:
        # TODO: decide if we want to get rid of this bash script gen
        """
        mkdir -p {config[output]}{wildcards.run}
        cmd="#!/bin/bash\n\n"
        cmd+="#SBATCH -p {params.partition}\n"
        cmd+="#SBATCH -N {params.N}\n"
        cmd+="#SBATCH -n {params.cores}\n"
        cmd+="#SBATCH -t {params.time}\n"
        cmd+="#SBATCH --mem {params.mem}\n"
        cmd+="#SBATCH -J demultiplex_10x_{wildcards.run}\n"
        cmd+="#SBATCH -o cellranger_mkfastq_{wildcards.run}_%A.out\n"
        cmd+="#SBATCH -e cellranger_mkfastq_{wildcards.run}_%A.err\n"
        cmd+="#SBATCH --test-only\n\n"
        cmd+="source new-modules.sh\n"
        cmd+="module purge\n"
        cmd+="module load cellranger/2.1.0-fasrc01\n\n"
        cmd+="cellranger makfastq --localcores=8 --ignore-dual-index --run {config[source]}{wildcards.run} --samplesheet {input.run_dir} --output_dir {config[output]}{wildcards.run}"
        echo "$cmd" >> {config[output]}{wildcards.run}/demultiplex_10x.sh
        """

rule demultiplex_10x:
    input:
        script=expand("{output}{{run}}/demultiplex_10x.sh", output=config['output'])
    output:
        touch(expand("{output}{{run}}/demultiplex.processed", output=config['output']))
    shell:
        """
        {config[output]}{wildcards.run}/test.sh
        """

rule count_10x:
    input:
        flag=expand("{output}{{run}}/demultiplex.processed", output=config['output']),
    output:
        touch(expand("{output}{{run}}/count.processed", output=config['output']))
    shell:
        """
        {config[output]}{wildcards.run}/test.sh
        """

rule update_lims_db:
    input:
        flag=expand("{output}{{run}}/demultiplex.processed", output=config['output']),
        sample_sheet=expand("{source}{{run}}/SampleSheet.csv", source=config['source']),
        run_folder=expand("{source}{{run}}", source=config['source'])
    output:
        touch(expand("{output}{{run}}/update_lims_db.processed", output=config['output']))
    run:
        # TODO: use this setup_logger for any logging from ody python functions
        setup_run_logger(wildcards.run, False)
        sample_sheet = SampleSheet(input.sample_sheet[0])
        instrument = sample_sheet.get_instrument()
        update_lims_db(input.run_folder[0], sample_sheet.sections, instrument)

rule fastqc:
    input:
        # TODO: consider using demux rule as a targeting input
        flag=expand("{output}{{run}}/demultiplex.processed", output=config['output']),
    output:
        touch(expand("{output}{{run}}/fastqc.processed", output=config['output']))
    shell:
        """
        module load fastqc/0.11.5-fasrc01
        files=$(find /n/boslfs/LABS/informatics/sequencing/ANALYSIS/190307_NB501677_0400_AH2WFKBGXB/ -name *.fastq.gz -not -name Undetermined* -print0 | xargs -0)
        mkdir -p {config[output]}{wildcards.run}/QC
        fastqc -o {config[output]}{wildcards.run}/QC --threads 1 -b $files
        """

rule cp_source_to_output:
    input:
        flag=expand("{output}{{run}}/demultiplex.processed", output=config['output']),
    params:
        sample_sheet="SampleSheet.csv",
        run_info="RunInfo.xml",
        interop="InterOp"
    output:
        sample_sheet=expand("{output}{{run}}/SampleSheet.csv", output=config['output']),
        run_info=expand("{output}{{run}}/RunInfo.xml", output=config['output']),
    shell:
        """
        cp {config[source]}{wildcards.run}/{params.sample_sheet} {output.sample_sheet}
        cp {config[source]}{wildcards.run}/{params.run_info} {output.run_info}
        """

rule checksum:
    input:
        rules.cp_source_to_output.output
    output:
        checksum=expand("{output}{{run}}/md5sum.txt", output=config['output']),
    shell:
        """
        files=$(find /n/boslfs/LABS/informatics/sequencing/ANALYSIS/190307_NB501677_0400_AH2WFKBGXB/ -name *.fastq.gz -print0 | xargs -0)
        md5sum $files > {output.checksum}
        """

rule publish:
    input:
        checksum=expand("{output}{{run}}/md5sum.txt", output=config['output']),
    output:
        touch(expand("{output}{{run}}/ody.complete", output=config['output']))
    shell:
        """
        cp -r {config[output]}{wildcards.run} {config[published]}{wildcards.run}
        """

'''


        mkdir {config[published]}{wildcards.run}
        interop=expand("{output}{{run}}/InterOp.csv", output=config['output'])
        sbatch {output}{run}/demultiplex_10x.sh >& {log}
'''
